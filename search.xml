<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Welcome</title>
    <url>/2022/05/08/Welcome/</url>
    <content><![CDATA[<p><strong>Welcome to Pursue Epipha’s Blog.<br>Just enjoy it!<br>This is my learning list: <a href="https://github.com/Purepipha/Way-of-seeking">github repo</a></strong><span id="more"></span></p>
]]></content>
  </entry>
  <entry>
    <title>CS144计算机网络Lab1</title>
    <url>/2022/05/08/CS144%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CLab1/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>这里记录了笔者学习计算机网络Lab1的一些笔记，Lab1实验实现的是一个流重组器，其功能是将接收到的数据段组成一个数据流。</p>
<ul>
<li>Lab1实验指导手册：<a href="https://cs144.github.io/assignments/lab1.pdf">https://cs144.github.io/assignments/lab1.pdf</a></li>
<li>个人实验项目地址：<a href="https://github.com/Purepipha/sponge">Github</a></li>
</ul>
<p>Tips：做实验前，最好复习一下计算机网络的相关知识。<span id="more"></span></p>
<h1 id="二、实验结构"><a href="#二、实验结构" class="headerlink" title="二、实验结构"></a>二、实验结构</h1><p>Lab1实验文档给我们介绍了前面几个实验的结构，下面的图完整的说明了前五个实验的试验结构。<br><img src="https://pic.imgdb.cn/item/62776e420947543129e65e09.png" alt="Lab1试验结构"><br>其中ByteStream的程序我们已经在Lab0已经实现了。在之后的实验中，我们还会编写：</p>
<ul>
<li>StreamReassembler(流重组器)：本实验实现，其功能是将小的比特流碎片以正确的顺序重组成一个连续的流</li>
<li>TCPReceiver(TCP接收器)： Lab2实现，它掌控入站字节流，功能有两个：告诉发送器它已经成功重组了多少字节(ACK)；发送器被允许现在发送多少字节(flow control)</li>
<li>TCPSender(TCP发送器): Lab3实现，它掌控出站字节流，涉及重传输策略等。</li>
<li>TCPConnection(TCP连接): Lab4实现，结合之前的几个实验来创造一个工作的TCP实现。</li>
</ul>
<h1 id="三、环境配置"><a href="#三、环境配置" class="headerlink" title="三、环境配置"></a>三、环境配置</h1><p>由于已经做过了Lab0,实验一的环境配置只需要将lab1分支合并到Lab0分支就可以了，在项目根目录下输入<code>git merge orgin/lab1-startercode</code>,合并分支之后你会在writeups,下面看到Lab1.md的文档，然后我们就可以进行代码的编写了，需要编写代码的文件是libsponge&#x2F;stream_reassmebler.hh 和 libsponge&#x2F;stream_reassmebler.cc。</p>
<h1 id="四、调试方法"><a href="#四、调试方法" class="headerlink" title="四、调试方法"></a>四、调试方法</h1><ol>
<li>gdb调试<br>输入下面的命令，生成可以调试的gdb文件：<ul>
<li>cmake .. -DCMAKE_BUILD_TYPE &#x3D; Debug</li>
<li>make<br>运行 make check_lab1，找到执行错误的test文件，记住名称，去build&#x2F;tests里找到对应测试程序文件，使用gdb命令进行调试。</li>
</ul>
</li>
<li>IDE Vscode 调试<br>笔者使用的IDE是Vscode，这里使用了大佬的.vscode文件夹下的json文件来进行调试,网址如下：(<a href="https://segmentfault.com/a/1190000039087458)%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%9C%A8IDE%E9%87%8C%E9%9D%A2%E6%89%93%E6%96%AD%E7%82%B9%E6%9D%A5%E8%B0%83%E8%AF%95%EF%BC%8C%E5%AF%B9%E5%B0%8F%E7%99%BD%E6%9D%A5%E8%AF%B4%E6%9B%B4%E9%80%82%E5%90%88%E3%80%82">https://segmentfault.com/a/1190000039087458)，这样就可以通过在IDE里面打断点来调试，对小白来说更适合。</a><br>.vscode里配置文件的代码：<a href="https://github.com/Purepipha/sponge/tree/lab0-startercode/.vscode">@github.&#x2F;vsocde</a></li>
</ol>
<h1 id="五、-StreamReassmbler程序设计"><a href="#五、-StreamReassmbler程序设计" class="headerlink" title="五、 StreamReassmbler程序设计"></a>五、 StreamReassmbler程序设计</h1><ol>
<li>要求<br>要求我们实现的流重组器，具有以下特性：</li>
</ol>
<ul>
<li>接收数据子段，包括数据子段的内容，起始序列号，以及文件结尾标志<blockquote>
<p>这里的序列号实际上就是TCP Segment里的序列号</p>
</blockquote>
</li>
<li>输出重组后的字节流</li>
<li>对数据子段超出容量的部分进行截断</li>
<li>重组数据字段为字节流(这里需要分情况)<ul>
<li>可以写入重组字节流的子段<blockquote>
<p>写入重组字节流(若存在重叠， 写入未重叠部分)<br>判断是否可以合并之前存储的不满足写入条件的字段</p>
</blockquote>
</li>
<li>不可以写入重组字节流的子段<blockquote>
<p>缓存该子段<br>判断是否与缓存区的其他字段重合，若重合，则合并这些重合的子段</p>
</blockquote>
</li>
<li>接受到已经重组的子段，丢弃处理</li>
</ul>
</li>
<li>对容量有严格的限制：<br><img src="https://pic.imgdb.cn/item/627872780947543129cf6522.jpg" alt="容量限制"><blockquote>
<p>对容量进行限制，这里采用的最好的方法就是记录字节流第一个字节的序列号，以及加上容量之后第一个不可接受的字节的序列号，若超出该范围，进行截断处理</p>
</blockquote>
</li>
</ul>
<p>Tips:这个实验需要多画一些图，将各种子段重叠的情况都考虑进去，然后做相应的处理。<br>2. 程序设计</p>
<ul>
<li><p>数据结构的选取<br>这里核心是选取一个合适的数据结构来存储不能写入输出流的子段，即上图中红色部分的子段。这里刚开始笔者采用的是使用一个字节流来存储，后面字节流来存储这个数据段的实现太困难了，而且执行的效率肯定也不够高，因为有效信息没有存储和利用(每个段的起始字节号)。</p>
<blockquote>
<p>之后笔者参考了其他人的做法，目前看到了两种：</p>
<ul>
<li>采用一个自定义的结构体，然后用set存储；</li>
<li>采用pair&lt;size_t, string&gt;存储子段，然后放入map中；</li>
</ul>
<p>笔者选择了第一种， 这里定义了一个seg结构体，存储子段的起始字节序列号、结尾字节序列号、以及字符串的长度，之所以还存储结尾字节序列号是笔者发现在处理重叠时，该数据需要反复计算，因此存储了它。为seg结构体重载了operator&lt;，使得这些数据子段可以按照正确的顺序从小到大存储在set中。</p>
</blockquote>
</li>
<li><p>函数的设计<br>这个实验的核心是设计push_substring()函数，该函数需要对不同的子段进行不同的处理，出于模块化程序设计的思想，这里设计了几个函数来处理不同字段。<br>push_substring()在接收到一个字段之后：</p>
<ol>
<li>确认该子段是否需要截断，通过比较 index + data.size() 与 _first_unacceptable的大小，若大于，则截断该数据。</li>
<li>生成一个new_seg,判断该子段是否可以写入输出流，将index与_first_unassembeld比较，若index&lt;&#x3D;_first_unassembled，则可以写入，调用write_seg()函数</li>
<li>若该子段不可以写入输出流，则需要存储在set<seg>中，这里需要处理该子段与其他子段是否重叠的情况，因此调用handle_overlap()函数。</li>
</ol>
<p>接下来的重点就是分别实现上面提到的几个函数：</p>
<ul>
<li>write_seg()函数<br>该函数首先将new_seg写入到输出流中，写入完成后，开始判断会不会与辅助存储区的段重合。<br>这里重写判断的是辅助缓冲区的第一段,分以下几种情况：<ul>
<li>部分重合<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index:    _seg_index       _first_unassembled     _seg_end_index</span><br><span class="line">                V                    V                     V</span><br><span class="line">            ----+--------------------+---------------------+------</span><br><span class="line">first_seg:  ----///////////////////////////////////////////-------</span><br><span class="line">_output:    /////////////////////////-----------------------------</span><br></pre></td></tr></table></figure>
对于上面部分重合的情况，需要将first_seg中_first_unassembled的数到_seg_end_index的数据写入到输出流中，然后擦除该段，return</li>
<li>完全重合<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index:      _seg_index        _seg_end_index          _first_unassembled</span><br><span class="line">                V                    V                     V</span><br><span class="line">            ----+--------------------+---------------------+----------</span><br><span class="line">first_seg:  ----/////////////////////---------------------------------</span><br><span class="line">_output:    ///////////////////////////////////////////////-----------</span><br></pre></td></tr></table></figure>
对于上面完全重合的情况，直接将该段擦除，判断下一段的情况，判断的规则与擦除的段相同。</li>
<li>没有重合，这种情况比较简单，就不画图了，不做处理，return。</li>
</ul>
</li>
<li>handle_overlap()函数<br>该函数是处理new_seg插入辅助存储区的函数，对于new_seg来说，需要判断它与辅助存储区的其他段的重叠情况，这里采用的策略是从辅助存储区的第一个迭代器开始，依次判断辅助存储区的当前段与new_seg是否重叠：<br>不重叠，不做处理，重叠的话，调用merge_seg()函数，然后擦除该段。<br>在对整个存储区的段全部判断完毕后，将new_seg增加到辅助存储区中。<br>Tips:这里擦除段时，会使迭代器指向错误，这里采用的策略是，循环开始后，先记录迭代器的下一项，next_iter &#x3D; ++iter;然后再做iter–处理，回到迭代器指向的当前项，循环体结尾iter &#x3D; next_iter;这样就可以避免擦除数据段的影响了。</li>
<li>merge_seg()函数将new_seg与other_seg的数据合并，写入new_seg中，有四种情况：<ul>
<li>new_seg 完全覆盖 other_seg<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index:      new_seg_index   other_seg_index     other_seg_end   new_seg_end</span><br><span class="line">                 V                 V                   V             V</span><br><span class="line">            -----+-----------------+-------------------+-------------+-----</span><br><span class="line">new_seg     -----////////////////////////////////////////////////////------</span><br><span class="line">other_seg   -----------------------////////////////////--------------------</span><br></pre></td></tr></table></figure>
这种情况不做处理，直接返回就可以;</li>
<li>other_seg 完全覆盖 new_seg<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index:      other_seg_index   new_seg_index     new_seg_end   other_seg_end</span><br><span class="line">                   V               V                 V               V</span><br><span class="line">            -------+---------------+-----------------+---------------+-----</span><br><span class="line">new_seg     -----------------------//////////////////----------------------</span><br><span class="line">other_seg   -------//////////////////////////////////////////////////------</span><br></pre></td></tr></table></figure>
这种情况，new_seg &#x3D; other_seg;</li>
<li>other_seg 与 new_seg 的右端部分重合<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index:      new_seg_index   other_seg_index     new_seg_end   other_seg_end</span><br><span class="line">                 V                 V                 V               V</span><br><span class="line">            -----+-----------------+-----------------+---------------+-----</span><br><span class="line">new_seg     -----////////////////////////////////////----------------------</span><br><span class="line">other_seg   -----------------------//////////////////////////////////------</span><br></pre></td></tr></table></figure>
这种情况，将other_seg中未重合的数据增加到new_seg的右端，更新new_seg的结尾序列号项</li>
<li>other_seg 与 new_seg 的左端部分重合<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index:      new_seg_index   other_seg_index     other_seg_end   new_seg_end</span><br><span class="line">                 V                 V                   V             V</span><br><span class="line">            -----+-----------------+-------------------+-------------+-----</span><br><span class="line">new_seg     -----////////////////////////////////////////////////////------</span><br><span class="line">other_seg   -----------------------////////////////////--------------------</span><br></pre></td></tr></table></figure>
这种情况，将other_seg中未重合的数据增加到new_seg的左端，更新new_seg的起始序列号项</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="3">
<li>具体实现<br>实现的代码在github上：</li>
</ol>
<ul>
<li><a href="https://github.com/Purepipha/sponge/blob/lab0-startercode/libsponge/stream_reassembler.hh">stream_reassembler.hh</a></li>
<li><a href="https://github.com/Purepipha/sponge/blob/lab0-startercode/libsponge/stream_reassembler.cc">stream_reassembler.cc</a><br>测试结果过下：<br><img src="https://pic.imgdb.cn/item/6278bb840947543129d2382c.jpg" alt="测试结果"><br>整个用时是0.54s，还可以接受吧。</li>
</ul>
]]></content>
      <categories>
        <category>Way of Seeking</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>CS144Lab</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>CS144计算机网络Lab0</title>
    <url>/2022/05/08/CS144%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CLab0/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>这里记录了笔者学习计算机网络Lab1的一些笔记，Lab1实验实现的是一个流重组器，其功能是将接收到的数据段组成一个数据流。</p>
<ul>
<li>Lab0实验指导手册：<a href="https://cs144.github.io/assignments/lab0.pdf">https://cs144.github.io/assignments/lab0.pdf</a></li>
<li>个人实验项目地址：<a href="https://github.com/Purepipha/sponge">Github</a></li>
</ul>
<p>Tips：做实验前，最好复习一下计算机网络的相关知识，可以更好的帮助我们了解实验的整体设计。<span id="more"></span></p>
<h1 id="二、实验环境搭建"><a href="#二、实验环境搭建" class="headerlink" title="二、实验环境搭建"></a>二、实验环境搭建</h1><ul>
<li>搭建GUN&#x2F;Linux环境<br>这里就不详细展开了，需要的小伙伴可以看这两篇博客：<ul>
<li><a href="https://www.cnblogs.com/Fight-go/p/15827634.html">Linux系统安装</a></li>
<li><a href="https://www.cnblogs.com/Fight-go/p/15836109.html">GUN环境安装</a></li>
</ul>
</li>
</ul>
<h1 id="三、手动访问网页"><a href="#三、手动访问网页" class="headerlink" title="三、手动访问网页"></a>三、手动访问网页</h1><ol>
<li>使用浏览器，访问网页 <a href="http://cs144.keithw.org/hello">http://cs144.keithw.org/hello</a></li>
<li>使用telnet访问<ul>
<li>输入如下指令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet cs144.keithw.org http</span><br><span class="line">GET /hello HTTP/1.1</span><br><span class="line">Host: cs144.keithw.org</span><br><span class="line">Conncetion: close</span><br></pre></td></tr></table></figure></li>
<li>观察结果如下：<br> <img src="https://s2.loli.net/2022/04/24/C4G2dgHYVhMkF9u.png"><br> <font color=red><strong>Tips:实验成功的关键是输入的速度足够快，可以复制粘贴输入，速度慢了会返回404错误。</strong></font>这里telnet首先使用http端口连接服务器，然后提交一个GET请求，获得服务器 &#x2F;hello下的内容，然后关闭连接。这实际上与我们用浏览器访问该网址是一样的，只不过这里不是图形化页面，同时会返回所有的信息。</li>
</ul>
</li>
<li>任务：访问网址：<a href="http://cs144.keithw.org/lab0/sunetid">http://cs144.keithw.org/lab0/sunetid</a> ，其中sunetid可以自行设置，可以获得一个密码在 X-Your-Code-Is。<ul>
<li>命令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet cs144.keithw.org http</span><br><span class="line">GET /lab0/peng HTTP/1.1</span><br><span class="line">Host: cs144.keithw.org</span><br><span class="line">Conncetion: close</span><br></pre></td></tr></table></figure>
 Tips: 运行结果就不展示了，这里注意还是输入的速度要快，和我一样打字速度慢的可以先写好，复制粘贴。<h1 id="四、给自己发送邮件"><a href="#四、给自己发送邮件" class="headerlink" title="四、给自己发送邮件"></a>四、给自己发送邮件</h1>这个实验，使用CS144提供的实验不能够完成，因为使用到Stanford的邮箱服务，因此这里使用了QQ邮箱来完成该实验。</li>
</ul>
</li>
</ol>
<ul>
<li><p>在使用QQ邮箱进行实验之前，首先需要获得自己QQ邮箱的16位校验码，使用的是校验码登录。设置步骤如下：</p>
<ul>
<li>网页登录qq邮箱</li>
<li>点击设置，账户设置</li>
<li>在账户安全下面有 POP3&#x2F;IMAP&#x2F;SMTP&#x2F;Exchange&#x2F;CardDAV&#x2F;CalDAV服务选项，如下图所示：<br>  <img src="https://s2.loli.net/2022/04/24/feSh5kgRcVaOpln.png"></li>
<li>先点击开启SMTP服务，开启后点击生成授权码，生成一个十六位的校验码，记录下来。</li>
</ul>
</li>
<li><p>得到16位校验码之后，我们还不能使用，因为登录时使用的是校验码和qq号的64位base加密码。</p>
<ul>
<li>打开64base加密网址：<a href="https://base64.us/">https://base64.us/</a></li>
<li>输入你的qq号点击加密，把结果记录下来</li>
<li>输入你的16位校验码点击加密，把结果记录下来<br>  笔者进行了如下记录：<br>  <img src="https://s2.loli.net/2022/04/24/8AlughC5FmGNZwI.png"></li>
</ul>
</li>
<li><p>接下来就可以进行实验啦</p>
<ul>
<li>使用telnet连接qq邮箱的服务器</li>
<li>给服务器发送一个helo请求，helo可以大写，也可以小写</li>
<li>收到回复之后发送auth login，请求登录</li>
<li>接下来发送qq号的64位base码</li>
<li>发送邮箱的16位校验码的base码</li>
<li>登录成功之后就可以发送邮件啦</li>
<li>发送 MAIL FROM: &lt;QQ号@qq.com&gt; 告诉邮箱服务器邮件发送方，就你目前登录的qq邮箱</li>
<li>发送 RCPT TO: &lt;手机号@163.com&gt; 告诉邮箱服务器邮件接收方，就你想要发送的目标邮箱，这里笔者使用了自己的163邮箱</li>
<li>发送 DATA +回车 告诉服务器要输入邮件信息了</li>
<li>发送信息的模板如下：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">From: &lt;QQ号@qq.com&gt; #发送方</span><br><span class="line">To: &lt;手机号@163.com&gt; #接收方</span><br><span class="line">subject: test # 邮件主题，好多样例里只发送主题， 注意发送邮件内容需要在主题后有一空行</span><br><span class="line"># 空行</span><br><span class="line">  I am the ... # 邮件内容，邮件内容后也需要一空行</span><br><span class="line"># 空行</span><br><span class="line">. # ‘.’ 加回车提示邮件内容发送完成</span><br></pre></td></tr></table></figure></li>
<li>发送完邮件之前，可以输入QUIT加回车关闭telnet连接</li>
</ul>
</li>
<li><p>实验完整的命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet smtp.qq.com smtp</span><br><span class="line">HELO smtp.qq.com</span><br><span class="line">auth login</span><br><span class="line">QQ号的64位base编码：自己的qq号base64编码</span><br><span class="line">16位校验码的base编码：16位校验码的base64编码</span><br><span class="line">MAIL FROM: &lt;qq号@qq.com&gt;</span><br><span class="line">RCPT TO: &lt;手机号@163.com&gt;</span><br><span class="line">DATA</span><br><span class="line">From: &lt;qq号@qq.com&gt;</span><br><span class="line">To: &lt;手机号@163.com&gt;</span><br><span class="line">subject: test</span><br><span class="line"></span><br><span class="line">  I am the ...</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>实验结果<br><img src="https://s2.loli.net/2022/04/24/NWGD1dwuxvFem3H.png"><br>其中箭头指向的是来自服务器的回复信息。<br><img src="https://s2.loli.net/2022/04/24/r3qGWdFtAuLgVvx.png"></p>
<h1 id="五、监听和连接"><a href="#五、监听和连接" class="headerlink" title="五、监听和连接"></a>五、监听和连接</h1><p>这个实验是实现运行在同一台电脑上的两个终端之间进行通信。</p>
</li>
<li><p>实验步骤：</p>
<ul>
<li>打开一个终端，输入命令 <code>netcat -v -l -p 9090</code>，开启该终端的监听服务</li>
<li>打开另一个终端， 使用 telnet 进行连接， 输入指令 <code>telnet localhost 9090</code></li>
<li>如果运行顺利的话，两个终端都会收到消息，客户端(telnet)提示连接成功，服务端(netcat)提示，收到客户端(telnet)的连接</li>
<li>你可以在服务端或者客户端输入信息，按下回车键后会同步显示在另一个终端上</li>
<li>最后可以在服务端(netcat)输入<code>ctrl-C</code>关闭服务</li>
</ul>
</li>
<li><p>运行结果<br><img src="https://s2.loli.net/2022/04/24/Y6scbDU12mtFMZn.png"></p>
<h1 id="六、编写一个使用系统流套接字的网络程序"><a href="#六、编写一个使用系统流套接字的网络程序" class="headerlink" title="六、编写一个使用系统流套接字的网络程序"></a>六、编写一个使用系统流套接字的网络程序</h1><p>这里使用linux系统的套接字实现一个小程序webget，即我们之前使用telnet进行访问网页的程序。为了编写这个程序，我们首先需要使用git将github代码仓库里的代码克隆到本地，这里笔者使用的Vscode的Git管理，构建VscodeGit管理的教程，可以参考这篇博客：<a href="https://www.cnblogs.com/Fight-go/p/15851321.html">https://www.cnblogs.com/Fight-go/p/15851321.html</a></p>
</li>
</ul>
<ol>
<li>克隆项目<br>为了克隆这个实验项目，在终端输入如下指令:</li>
</ol>
<ul>
<li><code>git clone https://github.com/cs144/sponge</code> 就可以将源码拷贝到本地了。</li>
<li><code>cd sponge</code> 进入实验0目录</li>
<li><code>mkdir build</code>创建build目录</li>
<li><code>cd build</code> 进入编译目录</li>
<li><code>cmake ..</code> 设置编译系统</li>
<li><code>make</code> 编译源码，(可以使用make -j4 使用四个处理器)</li>
</ul>
<ol start="2">
<li>编码风格建议<br>在课程建议使用C++11的代码风格，这里笔者可能只使用了一部分，做后面的实验中应该也会优化之前的代码。<br>这里是课程给出的编码建议：</li>
</ol>
<ul>
<li>Use the language documentation at <a href="https://en.cppreference.com/">https://en.cppreference.com</a> as a resource.</li>
<li>Never use malloc() or free().</li>
<li>Never use new or delete.</li>
<li>Essentially never use raw pointers (*), and use “smart” pointers (unique ptr or shared ptr) only when necessary. (You will not need to use these in CS144.)</li>
<li>Avoid templates, threads, locks, and virtual functions. (You will not need to use these in CS144.)</li>
<li>Avoid C-style strings (char *str) or string functions (strlen(), strcpy()). These are pretty error-prone. Use a std::string instead.</li>
<li>Never use C-style casts (e.g., (FILE *)x). Use a C++ static cast if you have to (you generally will not need this in CS144).</li>
<li>Prefer passing function arguments by const reference (e.g.: const Address &amp; address).</li>
<li>Make every variable const unless it needs to be mutated.</li>
<li>Make every method const unless it needs to mutate the object.</li>
<li>Avoid global variables, and give every variable the smallest scope possible.</li>
<li>Before handing in an assignment, please run make format to normalize the coding style.</li>
</ul>
<ol start="3">
<li>读Sponge文件<br>关键需要阅读 libsponge&#x2F;util目录下的文件：<strong>file descriptor.hh, socket.hh, and address.hh.</strong></li>
<li>编写webget程序</li>
</ol>
<ul>
<li>使用IDE或者文本编辑器打开 apps&#x2F;webget.cc 文件</li>
<li>在get_URL()函数中，编写代码，可以看到开始提示”&#x2F;&#x2F; Your code here”</li>
</ul>
<p>套接字本身是一个文件描述符，程序通过它对“某个文件(字节流抽象)”执行操作，这里通过套接字的EOF标志符判断是否到达文件流结尾，如果到达，则停止读取，否则，一直进行读取。<br>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_URL</span><span class="params">(<span class="type">const</span> string &amp;host, <span class="type">const</span> string &amp;path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Your code here.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// You will need to connect to the &quot;http&quot; service on</span></span><br><span class="line">    <span class="comment">// the computer whose name is in the &quot;host&quot; string,</span></span><br><span class="line">    <span class="comment">// then request the URL path given in the &quot;path&quot; string.</span></span><br><span class="line"></span><br><span class="line">    TCPSocket local_socket;</span><br><span class="line">    Address sever_addr = <span class="built_in">Address</span>(host, <span class="string">&quot;http&quot;</span>);   <span class="comment">// get the address of sever</span></span><br><span class="line">    local_socket.<span class="built_in">connect</span>(sever_addr);           <span class="comment">// connect to the sever</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Then you&#x27;ll need to print out everything the server sends back,</span></span><br><span class="line">    <span class="comment">// (not just one call to read() -- everything) until you reach</span></span><br><span class="line">    <span class="comment">// the &quot;eof&quot; (end of file).</span></span><br><span class="line">    <span class="comment">// send GET request</span></span><br><span class="line">    <span class="comment">// string get_request = &quot;GET/ HTTP/1.1\r\nHost: &quot; + host + &quot;\r\n&quot; +</span></span><br><span class="line">    <span class="comment">//     &quot;Accept: &quot; + path + &quot;\r\n&quot; + &quot;Connection: close\r\n\r\n&quot;;</span></span><br><span class="line">    string get_request = <span class="string">&quot;GET &quot;</span> + path + <span class="string">&quot; HTTP/1.1\r\n&quot;</span></span><br><span class="line">        + <span class="string">&quot;Host: &quot;</span> + host + <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">        + <span class="string">&quot;Connection: close\r\n\r\n&quot;</span>;</span><br><span class="line">    local_socket.<span class="built_in">write</span>(get_request);</span><br><span class="line">    <span class="comment">// read the message from sever</span></span><br><span class="line">    <span class="keyword">while</span> (!local_socket.<span class="built_in">eof</span>())&#123;</span><br><span class="line">        cout &lt;&lt; local_socket.<span class="built_in">read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    local_socket.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">if</span> (local_socket.<span class="built_in">closed</span>())&#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; &quot;Connection closed by foreign host.&quot; &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Function called: get_URL(&quot;</span> &lt;&lt; host &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;).\n&quot;</span>;</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Warning: get_URL() has not been implemented yet.\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>编写完程序，可以运行make，如果看到错误信息，需要首先修复该信息</li>
<li>测试程序，通过运行<code>./apps/webget cs144.keithw.org /hello</code>，可以看到通过网页访问的结果</li>
<li>测试正确后，运行<code>make check_webget</code>来执行自动化测试，测试通过。<h1 id="七、Lab0实现-——-一个记忆可靠的字节流"><a href="#七、Lab0实现-——-一个记忆可靠的字节流" class="headerlink" title="七、Lab0实现 —— 一个记忆可靠的字节流"></a>七、Lab0实现 —— 一个记忆可靠的字节流</h1>因特网本身不对传输可靠性做保证，而是由终端即服务器和客户端的操作系统来保证可靠性。我们现在要实现的是位于TCP连接两端的套接字中的字节流数据结构。TCPSocket中有两个ByteStream，inbound用于接收数据，outbound用于发送数据。 大体上，ByteStream具有一定的容量，最大允许存储该容量大小的数据；在读取端读出一部分数据后，它会释放掉已经被读出的内容，以腾出空间继续让写端写入数据。<br>字节流以ByteStream类实现，在文件byte_stream.hh中定义，实现方法在byte_stream.cc中。这里笔者创建了一个字符串类型的buffer变量，来作为缓冲区的存储空间，还添加了一系列成员来实现读和写的工作，这里实现读和写的功能都是使用字符串类型的方法实现的。<br>代码如下:<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SPONGE_LIBSPONGE_BYTE_STREAM_HH</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPONGE_LIBSPONGE_BYTE_STREAM_HH</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//! \brief An in-order byte stream.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//! Bytes are written on the &quot;input&quot; side and read from the &quot;output&quot;</span></span><br><span class="line"><span class="comment">//! side.  The byte stream is finite: the writer can end the input,</span></span><br><span class="line"><span class="comment">//! and then no more bytes can be written.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ByteStream</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// Your code here -- add private members as necessary.</span></span><br><span class="line">    <span class="type">size_t</span> _capacity;       <span class="comment">// capacity of buffer</span></span><br><span class="line">    <span class="type">size_t</span> _bytes_written;    <span class="comment">// total len of written bytes</span></span><br><span class="line">    <span class="type">size_t</span> _bytes_read;       <span class="comment">// total len of read bytes</span></span><br><span class="line">    <span class="type">size_t</span> _buffer_size;    <span class="comment">// the size of buffer</span></span><br><span class="line">    <span class="type">size_t</span> _remaining_capacity;        <span class="comment">// now the len of buffer</span></span><br><span class="line">    std::string _buffer;    <span class="comment">// buffer of bytestream</span></span><br><span class="line">    <span class="type">bool</span> _input_ended;       <span class="comment">// flag indiacating that input is end</span></span><br><span class="line">    <span class="type">bool</span> _eof;              <span class="comment">// end of file flag</span></span><br><span class="line">    <span class="type">bool</span> _buffer_empty;     <span class="comment">// flag indicating that the buffer is empty</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hint: This doesn&#x27;t need to be a sophisticated data structure at</span></span><br><span class="line">    <span class="comment">// all, but if any of your tests are taking longer than a second,</span></span><br><span class="line">    <span class="comment">// that&#x27;s a sign that you probably want to keep exploring</span></span><br><span class="line">    <span class="comment">// different approaches.</span></span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> _error&#123;&#125;;  <span class="comment">//!&lt; Flag indicating that the stream suffered an error.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! Construct a stream with room for `capacity` bytes.</span></span><br><span class="line">    <span class="built_in">ByteStream</span>(<span class="type">const</span> <span class="type">size_t</span> capacity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name &quot;Input&quot; interface for the writer</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Write a string of bytes into the stream. Write as many</span></span><br><span class="line">    <span class="comment">//! as will fit, and return how many were written.</span></span><br><span class="line">    <span class="comment">//! \returns the number of bytes accepted into the stream</span></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">write</span><span class="params">(<span class="type">const</span> std::string &amp;data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \returns the number of additional bytes that the stream has space for</span></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">remaining_capacity</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Signal that the byte stream has reached its ending</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">end_input</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Indicate that the stream suffered an error.</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_error</span><span class="params">()</span> </span>&#123; _error = <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name &quot;Output&quot; interface for the reader</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Peek at next &quot;len&quot; bytes of the stream</span></span><br><span class="line">    <span class="comment">//! \returns a string</span></span><br><span class="line">    <span class="function">std::string <span class="title">peek_output</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> len)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Remove bytes from the buffer</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop_output</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Read (i.e., copy and then pop) the next &quot;len&quot; bytes of the stream</span></span><br><span class="line">    <span class="comment">//! \returns a string</span></span><br><span class="line">    <span class="function">std::string <span class="title">read</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \returns `true` if the stream input has ended</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">input_ended</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \returns `true` if the stream has suffered an error</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">error</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _error; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \returns the maximum amount that can currently be read from the stream</span></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">buffer_size</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \returns `true` if the buffer is empty</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">buffer_empty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \returns `true` if the output has reached the ending</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">eof</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name General accounting</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Total number of bytes written</span></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">bytes_written</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Total number of bytes popped</span></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">bytes_read</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// SPONGE_LIBSPONGE_BYTE_STREAM_HH</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;byte_stream.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Dummy implementation of a flow-controlled in-memory byte stream.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// For Lab 0, please replace with a real implementation that passes the</span></span><br><span class="line"><span class="comment">// automated checks run by `make check_lab0`.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You will need to add private members to the class declaration in `byte_stream.hh`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Targs&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DUMMY_CODE</span><span class="params">(Targs &amp;&amp;... <span class="comment">/* unused */</span>)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">ByteStream::<span class="built_in">ByteStream</span>(<span class="type">const</span> <span class="type">size_t</span> capacity) : _capacity(capacity),</span><br><span class="line">    _bytes_written(<span class="number">0</span>), _bytes_read(<span class="number">0</span>), _buffer_size(<span class="number">0</span>), _remaining_capacity(capacity), _buffer(<span class="string">&#x27;0&#x27;</span>,_capacity),</span><br><span class="line">    _input_ended(<span class="literal">false</span>), _eof(<span class="literal">false</span>), _buffer_empty(<span class="literal">true</span>)&#123;</span><br><span class="line">    _error = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">ByteStream::write</span><span class="params">(<span class="type">const</span> string &amp;data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">buffer_empty</span>())&#123;<span class="comment">// see if buffer is empty</span></span><br><span class="line">        _buffer_empty = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="built_in">size</span>() &gt;= _remaining_capacity)&#123;</span><br><span class="line">        <span class="type">size_t</span> len = _remaining_capacity;</span><br><span class="line">        _buffer.<span class="built_in">replace</span>(_buffer.<span class="built_in">begin</span>() + _buffer_size, _buffer.<span class="built_in">end</span>(), data);</span><br><span class="line">        _bytes_written += _remaining_capacity;</span><br><span class="line">        _buffer_size = _capacity;</span><br><span class="line">        _remaining_capacity = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">    _buffer.<span class="built_in">replace</span>(_buffer.<span class="built_in">begin</span>() + _buffer_size, _buffer.<span class="built_in">begin</span>() + _buffer_size + data.<span class="built_in">size</span>(), data);</span><br><span class="line">    _bytes_written += data.<span class="built_in">size</span>();</span><br><span class="line">    _buffer_size += data.<span class="built_in">size</span>();</span><br><span class="line">    _remaining_capacity -= data.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> data.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \param[in] len bytes will be copied from the output side of the buffer</span></span><br><span class="line"><span class="function">string <span class="title">ByteStream::peek_output</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> len)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _buffer.<span class="built_in">substr</span>(<span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \param[in] len bytes will be removed from the output side of the buffer</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ByteStream::pop_output</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> len)</span> </span>&#123;</span><br><span class="line">    _buffer.<span class="built_in">erase</span>(<span class="number">0</span>, len);</span><br><span class="line">    _remaining_capacity += len;</span><br><span class="line">    _buffer_size -= len;</span><br><span class="line">    _bytes_read += len;</span><br><span class="line">    <span class="keyword">if</span> (_buffer_size == <span class="number">0</span>)&#123;</span><br><span class="line">        _buffer_empty = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">input_ended</span>())</span><br><span class="line">            _eof = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! Read (i.e., copy and then pop) the next &quot;len&quot; bytes of the stream</span></span><br><span class="line"><span class="comment">//! \param[in] len bytes will be popped and returned</span></span><br><span class="line"><span class="comment">//! \returns a string</span></span><br><span class="line"><span class="function">std::string <span class="title">ByteStream::read</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> len)</span> </span>&#123;</span><br><span class="line">    std::string read_txt = <span class="built_in">peek_output</span>(len);</span><br><span class="line">    <span class="built_in">pop_output</span>(len);</span><br><span class="line">    <span class="keyword">return</span> read_txt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ByteStream::end_input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    _input_ended = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">buffer_empty</span>())</span><br><span class="line">        _eof = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ByteStream::input_ended</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _input_ended; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">ByteStream::buffer_size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _buffer_size; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ByteStream::buffer_empty</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _buffer_empty; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ByteStream::eof</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _eof; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">ByteStream::bytes_written</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _bytes_written; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">ByteStream::bytes_read</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _bytes_read; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">ByteStream::remaining_capacity</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _remaining_capacity; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>编写完成后运行 <code>make check_lab0</code>运行所有的测试样例，结果如下：<br><img src="https://pic.imgdb.cn/item/6278c4a10947543129efb80d.jpg" alt="测试结果"></li>
</ul>
<p>Tips:在完成Lab1之后，对Lab0的代码进行了重构，删除了一些冗余的数据成员，比如说_buffer_empty、_buffer_size、_remain_capacity等，符合了若无必要，勿增实体这一要求。同时对_buffer存储区的初始化方式做了改变，之间初始化是采用初始化容量，填充’\0’的方法，这实际上很不合理，之后改成了初始化一个空的字符串，容量限制放在其他的代码处，效果好了很多。<br>重构后的代码上传在github上:</p>
<ul>
<li><a href="https://github.com/Purepipha/sponge/blob/lab0-startercode/libsponge/byte_stream.hh">byte_stream.hh</a></li>
<li><a href="https://github.com/Purepipha/sponge/blob/lab0-startercode/libsponge/byte_stream.cc">byte_stream.cc</a></li>
</ul>
]]></content>
      <categories>
        <category>Way of Seeking</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>CS144Lab</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
</search>
